version: 0.2

env:
  variables:
    BACKEND_DIR: backend
    FRONTEND_DIR: frontend
    IMAGE_REPO_BACKEND: 235494811179.dkr.ecr.us-east-2.amazonaws.com/inventory-backend
    IMAGE_REPO_FRONTEND: 235494811179.dkr.ecr.us-east-2.amazonaws.com/inventory-frontend
    AWS_DEFAULT_REGION: us-east-2
    SONAR_SCANNER_VERSION: 5.0.1.3006
    SONAR_HOST_URL: http://44.211.210.52
    SONAR_LOGIN: sqp_c9a3aa4ba279b8808204bcd7a0c7d3665611e629
    SONAR_PROJECT_KEY: juhi-final
    EKS_CLUSTER_NAME: MyEKSCluster

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Installing backend dependencies..."
      - cd $BACKEND_DIR && npm install
      - cd ../$FRONTEND_DIR && npm install
      - cd ../
      - echo "Downloading SonarQube Scanner v$SONAR_SCANNER_VERSION..."
      - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      - unzip sonar-scanner.zip
      - mv sonar-scanner-$SONAR_SCANNER_VERSION-linux /opt/sonar-scanner
      - export PATH=$PATH:/opt/sonar-scanner/bin
      - echo "SonarQube Scanner installed."
      # ---- Install kubectl and set up kubeconfig ----
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
      - echo "Configuring kubectl for EKS..."
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

  pre_build:
    commands:
      - echo "Running SonarQube Scan..."
      - export PATH=$PATH:/opt/sonar-scanner/bin
      - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN
      - echo "Logging into Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 235494811179.dkr.ecr.us-east-2.amazonaws.com

  build:
    commands:
      - echo "Building backend Docker image..."
      - docker build -t $IMAGE_REPO_BACKEND:latest $BACKEND_DIR
      - echo "Pushing backend Docker image..."
      - docker push $IMAGE_REPO_BACKEND:latest
      - echo "Deploying backend and DB secret to EKS..."
      - kubectl apply -f k8s/db-secret.yaml
      - kubectl apply -f k8s/backend-deployment.yaml
      - |
        echo "Waiting for backend LoadBalancer DNS...";
        for i in {1..30}; do
          BACKEND_LB=$(kubectl get svc backend-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}');
          if [[ -n "$BACKEND_LB" ]]; then
            echo "Backend LB DNS found: $BACKEND_LB";
            break;
          fi;
          echo "Waiting for backend LB DNS... ($i/30)";
          sleep 10;
        done;
        if [[ -z "$BACKEND_LB" ]]; then
          echo "ERROR: Backend LB DNS not found";
          exit 1;
        fi;
        echo "Building frontend Docker image with backend URL: http://$BACKEND_LB:4000";
        docker build --build-arg REACT_APP_BACKEND_URL="http://$BACKEND_LB:4000" -t $IMAGE_REPO_FRONTEND:latest $FRONTEND_DIR;
        echo "Pushing frontend Docker image...";
        docker push $IMAGE_REPO_FRONTEND:latest;
        echo "Deploying frontend to EKS...";
        kubectl apply -f k8s/frontend-deployment.yaml

artifacts:
  base-directory: k8s
  files:
    - '**/*'
